-- Scraped by chicken
-- Author: relative
-- Title [Release] Coronavirus in-game stats
-- Forum link https://aimware.net/forum/thread/129904

localCOUNTRIES={
"China",
"Italy",
"Iran",
"Spain",
"Germany",
"USA",
"France",
"S.Korea",
"Switzerland",
"UK",
"Netherlands",
"Austria",
"Belgium",
"Norway",
"Sweden",
"Denmark",
"Japan",
"Malaysia",
"Canada",
"Portugal",
"Australia",
"DiamondPrincess",
"Czechia",
"Israel",
"Brazil",
"Ireland",
"Greece",
"Qatar",
"Pakistan",
"Finland",
"Turkey",
"Poland",
"Singapore",
"Chile",
"Luxembourg",
"Iceland",
"Slovenia",
"Indonesia",
"Bahrain",
"Romania",
"SaudiArabia",
"Thailand",
"Estonia",
"Ecuador",
"Egypt",
"Peru",
"Philippines",
"HongKong",
"Russia",
"India",
"Iraq",
"Mexico",
"Lebanon",
"SouthAfrica",
"Kuwait",
"SanMarino",
"UAE",
"Panama",
"Argentina",
"Slovakia",
"Armenia",
"Croatia",
"Taiwan",
"Colombia",
"Bulgaria",
"Serbia",
"Uruguay",
"Algeria",
"CostaRica",
"Latvia",
"Vietnam",
"Andorra",
"Hungary",
"Brunei",
"FaeroeIslands",
"Jordan",
"Cyprus",
"Albania",
"BosniaandHerzegovina",
"Morocco",
"SriLanka",
"Malta",
"Belarus",
"NorthMacedonia",
"Moldova",
"Lithuania",
"Oman",
"Palestine",
"Kazakhstan",
"Azerbaijan",
"Venezuela",
"Georgia",
"Tunisia",
"NewZealand",
"Cambodia",
"Senegal",
"DominicanRepublic",
"BurkinaFaso",
"Guadeloupe",
"Liechtenstein",
"Réunion",
"Ukraine",
"Martinique",
"Uzbekistan",
"Afghanistan",
"Bangladesh",
"Macao",
"Cuba",
"Jamaica",
"Bolivia",
"FrenchGuiana",
"DRC",
"Cameroon",
"Maldives",
"Montenegro",
"Paraguay",
"Nigeria",
"Guam",
"Honduras",
"ChannelIslands",
"Ghana",
"Rwanda",
"Monaco",
"Gibraltar",
"Guatemala",
"IvoryCoast",
"TrinidadandTobago",
"Ethiopia",
"Kenya",
"Mauritius",
"EquatorialGuinea",
"FrenchPolynesia",
"Mongolia",
"PuertoRico",
"Seychelles",
"Tanzania",
"Guyana",
"Aruba",
"Barbados",
"Mayotte",
"CaymanIslands",
"Curaçao",
"Bahamas",
"Congo",
"Gabon",
"Kyrgyzstan",
"Namibia",
"St.Barth",
"SaintMartin",
"U.S.VirginIslands",
"Sudan",
"Benin",
"Bermuda",
"Greenland",
"Liberia",
"Mauritania",
"NewCaledonia",
"SaintLucia",
"Zambia",
"Nepal",
"AntiguaandBarbuda",
"Bhutan",
"CAR",
"Chad",
"Djibouti",
"ElSalvador",
"Fiji",
"Gambia",
"Guinea",
"VaticanCity",
"IsleofMan",
"Montserrat",
"Nicaragua",
"Niger",
"St.VincentGrenadines",
"SintMaarten",
"Somalia",
"Suriname",
"Eswatini",
"Togo"
}
functionjsonlua()
--
--json.lua
--
--Copyright(c)2019rxi
--
--Permissionisherebygranted,freeofcharge,toanypersonobtainingacopyof
--thissoftwareandassociateddocumentationfiles(the"Software"),todealin
--theSoftwarewithoutrestriction,includingwithoutlimitationtherightsto
--use,copy,modify,merge,publish,distribute,sublicense,and/orsellcopies
--oftheSoftware,andtopermitpersonstowhomtheSoftwareisfurnishedtodo
--so,subjecttothefollowingconditions:
--
--Theabovecopyrightnoticeandthispermissionnoticeshallbeincludedinall
--copiesorsubstantialportionsoftheSoftware.
--
--THESOFTWAREISPROVIDED"ASIS",WITHOUTWARRANTYOFANYKIND,EXPRESSOR
--IMPLIED,INCLUDINGBUTNOTLIMITEDTOTHEWARRANTIESOFMERCHANTABILITY,
--FITNESSFORAPARTICULARPURPOSEANDNONINFRINGEMENT.INNOEVENTSHALLTHE
--AUTHORSORCOPYRIGHTHOLDERSBELIABLEFORANYCLAIM,DAMAGESOROTHER
--LIABILITY,WHETHERINANACTIONOFCONTRACT,TORTOROTHERWISE,ARISINGFROM,
--OUTOFORINCONNECTIONWITHTHESOFTWAREORTHEUSEOROTHERDEALINGSINTHE
--SOFTWARE.
--

localjson={_version="0.1.2"}

-------------------------------------------------------------------------------
--Encode
-------------------------------------------------------------------------------

localencode

localescape_char_map={
["\\"]="\\\\",
["\""]="\\\"",
["\b"]="\\b",
["\f"]="\\f",
["\n"]="\\n",
["\r"]="\\r",
["\t"]="\\t",
}

localescape_char_map_inv={["\\/"]="/"}
fork,vinpairs(escape_char_map)do
escape_char_map_inv[v]=k
end


localfunctionescape_char(c)
returnescape_char_map[c]orstring.format("\\u%04x",c:byte())
end


localfunctionencode_nil(val)
return"null"
end
localfunctionencode_table(val,stack)
localres={}
stack=stackor{}

--Circularreference?
ifstack[val]thenerror("circularreference")end

stack[val]=true

ifrawget(val,1)~=nilornext(val)==nilthen
--Treatasarray--checkkeysarevalidanditisnotsparse
localn=0
forkinpairs(val)do
iftype(k)~="number"then
error("invalidtable:mixedorinvalidkeytypes")
end
n=n+1
end
ifn~=#valthen
error("invalidtable:sparsearray")
end
--Encode
fori,vinipairs(val)do
table.insert(res,encode(v,stack))
end
stack[val]=nil
return"["..table.concat(res,",").."]"

else
--Treatasanobject
fork,vinpairs(val)do
iftype(k)~="string"then
error("invalidtable:mixedorinvalidkeytypes")
end
table.insert(res,encode(k,stack)..":"..encode(v,stack))
end
stack[val]=nil
return"{"..table.concat(res,",").."}"
end
end
localfunctionencode_string(val)
return'"'..val:gsub('[%z\1-\31\\"]',escape_char)..'"'
end
localfunctionencode_number(val)
--CheckforNaN,-infandinf
ifval~=valorval<=-math.hugeorval>=math.hugethen
error("unexpectednumbervalue'"..tostring(val).."'")
end
returnstring.format("%.14g",val)
end
localtype_func_map={
["nil"]=encode_nil,
["table"]=encode_table,
["string"]=encode_string,
["number"]=encode_number,
["boolean"]=tostring,
}
encode=function(val,stack)
localt=type(val)
localf=type_func_map[t]
iffthen
returnf(val,stack)
end
error("unexpectedtype'"..t.."'")
end
functionjson.encode(val)
return(encode(val))
end
-------------------------------------------------------------------------------
--Decode
-------------------------------------------------------------------------------
localparse
localfunctioncreate_set(...)
localres={}
fori=1,select("#",...)do
res[select(i,...)]=true
end
returnres
end
localspace_chars=create_set("","\t","\r","\n")
localdelim_chars=create_set("","\t","\r","\n","]","}",",")
localescape_chars=create_set("\\","/",'"',"b","f","n","r","t","u")
localliterals=create_set("true","false","null")
localliteral_map={
["true"]=true,
["false"]=false,
["null"]=nil,
}
localfunctionnext_char(str,idx,set,negate)
fori=idx,#strdo
ifset[str:sub(i,i)]~=negatethen
returni
end
end
return#str+1
end
localfunctiondecode_error(str,idx,msg)
localline_count=1
localcol_count=1
fori=1,idx-1do
col_count=col_count+1
ifstr:sub(i,i)=="\n"then
line_count=line_count+1
col_count=1
end
end
error(string.format("%satline%dcol%d",msg,line_count,col_count))
end
localfunctioncodepoint_to_utf8(n)
--http://scripts.sil.org/cms/scripts/page.php?site_id=nrsi&id=iws-appendixa
localf=math.floor
ifn<=0x7fthen
returnstring.char(n)
elseifn<=0x7ffthen
returnstring.char(f(n/64)+192,n%64+128)
elseifn<=0xffffthen
returnstring.char(f(n/4096)+224,f(n%4096/64)+128,n%64+128)
elseifn<=0x10ffffthen
returnstring.char(f(n/262144)+240,f(n%262144/4096)+128,
f(n%4096/64)+128,n%64+128)
end
error(string.format("invalidunicodecodepoint'%x'",n))
end
localfunctionparse_unicode_escape(s)
localn1=tonumber(s:sub(3,6),16)
localn2=tonumber(s:sub(9,12),16)
--Surrogatepair?
ifn2then
returncodepoint_to_utf8((n1-0xd800)*0x400+(n2-0xdc00)+0x10000)
else
returncodepoint_to_utf8(n1)
end
end
localfunctionparse_string(str,i)
localhas_unicode_escape=false
localhas_surrogate_escape=false
localhas_escape=false
locallast
forj=i+1,#strdo
localx=str:byte(j)

ifx<32then
decode_error(str,j,"controlcharacterinstring")
end

iflast==92then--"\\"(escapechar)
ifx==117then--"u"(unicodeescapesequence)
localhex=str:sub(j+1,j+5)
ifnothex:find("%x%x%x%x")then
decode_error(str,j,"invalidunicodeescapeinstring")
end
ifhex:find("^[dD][89aAbB]")then
has_surrogate_escape=true
else
has_unicode_escape=true
end
else
localc=string.char(x)
ifnotescape_chars[c]then
decode_error(str,j,"invalidescapechar'"..c.."'instring")
end
has_escape=true
end
last=nil

elseifx==34then--'"'(endofstring)
locals=str:sub(i+1,j-1)
ifhas_surrogate_escapethen
s=s:gsub("\\u[dD][89aAbB]..\\u....",parse_unicode_escape)
end
ifhas_unicode_escapethen
s=s:gsub("\\u....",parse_unicode_escape)
end
ifhas_escapethen
s=s:gsub("\\.",escape_char_map_inv)
end
returns,j+1

else
last=x
end
end
decode_error(str,i,"expectedclosingquoteforstring")
end
localfunctionparse_number(str,i)
localx=next_char(str,i,delim_chars)
locals=str:sub(i,x-1)
localn=tonumber(s)
ifnotnthen
decode_error(str,i,"invalidnumber'"..s.."'")
end
returnn,x
end
localfunctionparse_literal(str,i)
localx=next_char(str,i,delim_chars)
localword=str:sub(i,x-1)
ifnotliterals[word]then
decode_error(str,i,"invalidliteral'"..word.."'")
end
returnliteral_map[word],x
end
localfunctionparse_array(str,i)
localres={}
localn=1
i=i+1
while1do
localx
i=next_char(str,i,space_chars,true)
--Empty/endofarray?
ifstr:sub(i,i)=="]"then
i=i+1
break
end
--Readtoken
x,i=parse(str,i)
res[n]=x
n=n+1
--Nexttoken
i=next_char(str,i,space_chars,true)
localchr=str:sub(i,i)
i=i+1
ifchr=="]"thenbreakend
ifchr~=","thendecode_error(str,i,"expected']'or','")end
end
returnres,i
end
localfunctionparse_object(str,i)
localres={}
i=i+1
while1do
localkey,val
i=next_char(str,i,space_chars,true)
--Empty/endofobject?
ifstr:sub(i,i)=="}"then
i=i+1
break
end
--Readkey
ifstr:sub(i,i)~='"'then
decode_error(str,i,"expectedstringforkey")
end
key,i=parse(str,i)
--Read':'delimiter
i=next_char(str,i,space_chars,true)
ifstr:sub(i,i)~=":"then
decode_error(str,i,"expected':'afterkey")
end
i=next_char(str,i+1,space_chars,true)
--Readvalue
val,i=parse(str,i)
--Set
res[key]=val
--Nexttoken
i=next_char(str,i,space_chars,true)
localchr=str:sub(i,i)
i=i+1
ifchr=="}"thenbreakend
ifchr~=","thendecode_error(str,i,"expected'}'or','")end
end
returnres,i
end
localchar_func_map={
['"']=parse_string,
["0"]=parse_number,
["1"]=parse_number,
["2"]=parse_number,
["3"]=parse_number,
["4"]=parse_number,
["5"]=parse_number,
["6"]=parse_number,
["7"]=parse_number,
["8"]=parse_number,
["9"]=parse_number,
["-"]=parse_number,
["t"]=parse_literal,
["f"]=parse_literal,
["n"]=parse_literal,
["["]=parse_array,
["{"]=parse_object,
}
parse=function(str,idx)
localchr=str:sub(idx,idx)
localf=char_func_map[chr]
iffthen
returnf(str,idx)
end
decode_error(str,idx,"unexpectedcharacter'"..chr.."'")
end
functionjson.decode(str)
iftype(str)~="string"then
error("expectedargumentoftypestring,got"..type(str))
end
localres,idx=parse(str,next_char(str,1,space_chars,true))
idx=next_char(str,idx,space_chars,true)
ifidx<=#strthen
decode_error(str,idx,"trailinggarbage")
end
returnres
end
returnjson
end
localjson=jsonlua()

localREF_MISC=gui.Reference("Misc")
localTAB_CORONA=gui.Tab(REF_MISC,"corona","Coronavirus")
localGRP_SETTINGS=gui.Groupbox(TAB_CORONA,"Settings",10,10,300,500)

localCMB_REGION=gui.Combobox(GRP_SETTINGS,"region","Region",unpack(COUNTRIES))
localCHK_DRAWSTATS=gui.Checkbox(GRP_SETTINGS,"draw","DrawStats",true)
localCHK_UPDATERND=gui.Checkbox(GRP_SETTINGS,"updateonroundstart","UpdateonRoundStart",true)
localCHK_SAYRND=gui.Checkbox(GRP_SETTINGS,"chatsayonroundstart","ChatSayonRoundStart",false)
localBTN_UPDATE=gui.Button(GRP_SETTINGS,"UpdateData",function()
updateStats()
end)
CHK_DRAWSTATS:SetDescription("ClickUpdateStatsafterchangingtohidethewindow")

localWND_CORONA=gui.Window("corona","Coronavirus",0,500,300,186)
localLBL_REGION=gui.Text(WND_CORONA,"Region:N/A")
localLBL_CASES=gui.Text(WND_CORONA,"Cases:N/A")
localLBL_DEATHS=gui.Text(WND_CORONA,"Deaths:N/A")
localLBL_CASESTDY=gui.Text(WND_CORONA,"CasesToday:N/A")
localLBL_DEATHSTDY=gui.Text(WND_CORONA,"DeathsToday:N/A")

localG_STATS=nil
functiongetStats(cb)
localres=http.Get("https://corona.lmao.ninja/countries/"..COUNTRIES[CMB_REGION:GetValue()+1],function(res)
localtbl=json.decode(res)
G_STATS=tbl
cb(tbl)
end)
end
functionupdateStats()
localstats=getStats(function(stats)
WND_CORONA:SetActive(CHK_DRAWSTATS:GetValue())
LBL_REGION:SetText("Region:"..stats["country"])
LBL_CASES:SetText("Cases:"..stats["cases"])
LBL_DEATHS:SetText("Deaths:"..stats["deaths"])
LBL_CASESTDY:SetText("CasesToday:"..stats["todayCases"])
LBL_DEATHSTDY:SetText("DeathsToday:"..stats["todayDeaths"])
G_STATS=stats
end)
end

functionsayStats(stats)
client.ChatSay("CoronaStatsfor"..stats["country"]..":TotalCases:"..stats["cases"]..",TotalDeaths:"..stats["deaths"])
end
functionFireGameEvent(Event)
ifEvent:GetName()=="round_start"then
ifCHK_UPDATERND:GetValue()then
updateStats(function(stats)
ifCHK_SAYRND:GetValue()then
end
end)
end
ifCHK_SAYRND:GetValue()then
ifG_STATS==nilthen
updateStats(function(stats)
sayStats(stats)
end)
else
sayStats(G_STATS)
end
end
end
end
updateStats()

client.AllowListener("round_start")
callbacks.Register("FireGameEvent",FireGameEvent)

